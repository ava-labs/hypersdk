// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.10.0
// source: x/dsmr/types.go

package dsmr

import (
	"io"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Int64

	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__UnsignedChunk__Builder__tag = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__UnsignedChunk__Expiry__tag  = "\x10" // canoto.Tag(2, canoto.Varint)
	canoto__UnsignedChunk__Data__tag    = "\x1a" // canoto.Tag(3, canoto.Len)
)

type canotoData_UnsignedChunk struct {
	size int
}

// MakeCanoto creates a new empty value.
func (*UnsignedChunk) MakeCanoto() *UnsignedChunk {
	return new(UnsignedChunk)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *UnsignedChunk) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *UnsignedChunk) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			var length int64
			if err := canoto.ReadInt(&r, &length); err != nil {
				return err
			}

			const (
				expectedLength      = len(c.Builder)
				expectedLengthInt64 = int64(expectedLength)
			)
			if length != expectedLengthInt64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy(c.Builder[:], r.B)
			if canoto.IsZero(c.Builder) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 2:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Expiry); err != nil {
				return err
			}
			if canoto.IsZero(c.Expiry) {
				return canoto.ErrZeroValue
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.Data); err != nil {
				return err
			}
			if len(c.Data) == 0 {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *UnsignedChunk) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *UnsignedChunk) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	if !canoto.IsZero(c.Builder) {
		c.canotoData.size += len(canoto__UnsignedChunk__Builder__tag) + canoto.SizeBytes(c.Builder[:])
	}
	if !canoto.IsZero(c.Expiry) {
		c.canotoData.size += len(canoto__UnsignedChunk__Expiry__tag) + canoto.SizeInt(c.Expiry)
	}
	if len(c.Data) != 0 {
		c.canotoData.size += len(canoto__UnsignedChunk__Data__tag) + canoto.SizeBytes(c.Data)
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *UnsignedChunk) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *UnsignedChunk) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *UnsignedChunk) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.Builder) {
		canoto.Append(&w, canoto__UnsignedChunk__Builder__tag)
		canoto.AppendBytes(&w, c.Builder[:])
	}
	if !canoto.IsZero(c.Expiry) {
		canoto.Append(&w, canoto__UnsignedChunk__Expiry__tag)
		canoto.AppendInt(&w, c.Expiry)
	}
	if len(c.Data) != 0 {
		canoto.Append(&w, canoto__UnsignedChunk__Data__tag)
		canoto.AppendBytes(&w, c.Data)
	}
	return w
}

const (
	canoto__ChunkReference__ChunkID__tag = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__ChunkReference__Builder__tag = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__ChunkReference__Expiry__tag  = "\x18" // canoto.Tag(3, canoto.Varint)
)

type canotoData_ChunkReference struct {
	size int
}

// MakeCanoto creates a new empty value.
func (*ChunkReference) MakeCanoto() *ChunkReference {
	return new(ChunkReference)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *ChunkReference) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *ChunkReference) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			var length int64
			if err := canoto.ReadInt(&r, &length); err != nil {
				return err
			}

			const (
				expectedLength      = len(c.ChunkID)
				expectedLengthInt64 = int64(expectedLength)
			)
			if length != expectedLengthInt64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy(c.ChunkID[:], r.B)
			if canoto.IsZero(c.ChunkID) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			var length int64
			if err := canoto.ReadInt(&r, &length); err != nil {
				return err
			}

			const (
				expectedLength      = len(c.Builder)
				expectedLengthInt64 = int64(expectedLength)
			)
			if length != expectedLengthInt64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy(c.Builder[:], r.B)
			if canoto.IsZero(c.Builder) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Expiry); err != nil {
				return err
			}
			if canoto.IsZero(c.Expiry) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *ChunkReference) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *ChunkReference) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	if !canoto.IsZero(c.ChunkID) {
		c.canotoData.size += len(canoto__ChunkReference__ChunkID__tag) + canoto.SizeBytes(c.ChunkID[:])
	}
	if !canoto.IsZero(c.Builder) {
		c.canotoData.size += len(canoto__ChunkReference__Builder__tag) + canoto.SizeBytes(c.Builder[:])
	}
	if !canoto.IsZero(c.Expiry) {
		c.canotoData.size += len(canoto__ChunkReference__Expiry__tag) + canoto.SizeInt(c.Expiry)
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *ChunkReference) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *ChunkReference) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *ChunkReference) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.ChunkID) {
		canoto.Append(&w, canoto__ChunkReference__ChunkID__tag)
		canoto.AppendBytes(&w, c.ChunkID[:])
	}
	if !canoto.IsZero(c.Builder) {
		canoto.Append(&w, canoto__ChunkReference__Builder__tag)
		canoto.AppendBytes(&w, c.Builder[:])
	}
	if !canoto.IsZero(c.Expiry) {
		canoto.Append(&w, canoto__ChunkReference__Expiry__tag)
		canoto.AppendInt(&w, c.Expiry)
	}
	return w
}

const (
	canoto__SerializeChunkCertificate__Reference__tag = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__SerializeChunkCertificate__Signature__tag = "\x12" // canoto.Tag(2, canoto.Len)
)

type canotoData_SerializeChunkCertificate struct {
	size int
}

// MakeCanoto creates a new empty value.
func (*SerializeChunkCertificate) MakeCanoto() *SerializeChunkCertificate {
	return new(SerializeChunkCertificate)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *SerializeChunkCertificate) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *SerializeChunkCertificate) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = (&c.Reference).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.Signature); err != nil {
				return err
			}
			if len(c.Signature) == 0 {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *SerializeChunkCertificate) ValidCanoto() bool {
	if c == nil {
		return true
	}
	if !(&c.Reference).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *SerializeChunkCertificate) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	(&c.Reference).CalculateCanotoCache()
	if fieldSize := (&c.Reference).CachedCanotoSize(); fieldSize != 0 {
		c.canotoData.size += len(canoto__SerializeChunkCertificate__Reference__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if len(c.Signature) != 0 {
		c.canotoData.size += len(canoto__SerializeChunkCertificate__Signature__tag) + canoto.SizeBytes(c.Signature)
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *SerializeChunkCertificate) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *SerializeChunkCertificate) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *SerializeChunkCertificate) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if fieldSize := (&c.Reference).CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(&w, canoto__SerializeChunkCertificate__Reference__tag)
		canoto.AppendInt(&w, int64(fieldSize))
		w = (&c.Reference).MarshalCanotoInto(w)
	}
	if len(c.Signature) != 0 {
		canoto.Append(&w, canoto__SerializeChunkCertificate__Signature__tag)
		canoto.AppendBytes(&w, c.Signature)
	}
	return w
}

const (
	canoto__Chunk__UnsignedChunk__tag = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__Chunk__Certificate__tag   = "\x12" // canoto.Tag(2, canoto.Len)
)

type canotoData_Chunk struct {
	size int
}

// MakeCanoto creates a new empty value.
func (*Chunk) MakeCanoto() *Chunk {
	return new(Chunk)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *Chunk) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *Chunk) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = (&c.UnsignedChunk).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = (&c.Certificate).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *Chunk) ValidCanoto() bool {
	if c == nil {
		return true
	}
	if !(&c.UnsignedChunk).ValidCanoto() {
		return false
	}
	if !(&c.Certificate).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *Chunk) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	(&c.UnsignedChunk).CalculateCanotoCache()
	if fieldSize := (&c.UnsignedChunk).CachedCanotoSize(); fieldSize != 0 {
		c.canotoData.size += len(canoto__Chunk__UnsignedChunk__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	(&c.Certificate).CalculateCanotoCache()
	if fieldSize := (&c.Certificate).CachedCanotoSize(); fieldSize != 0 {
		c.canotoData.size += len(canoto__Chunk__Certificate__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *Chunk) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *Chunk) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *Chunk) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if fieldSize := (&c.UnsignedChunk).CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(&w, canoto__Chunk__UnsignedChunk__tag)
		canoto.AppendInt(&w, int64(fieldSize))
		w = (&c.UnsignedChunk).MarshalCanotoInto(w)
	}
	if fieldSize := (&c.Certificate).CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(&w, canoto__Chunk__Certificate__tag)
		canoto.AppendInt(&w, int64(fieldSize))
		w = (&c.Certificate).MarshalCanotoInto(w)
	}
	return w
}

const (
	canoto__Block__ParentID__tag     = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__Block__Height__tag       = "\x10" // canoto.Tag(2, canoto.Varint)
	canoto__Block__Timestamp__tag    = "\x18" // canoto.Tag(3, canoto.Varint)
	canoto__Block__Chunks__tag       = "\x22" // canoto.Tag(4, canoto.Len)
	canoto__Block__BlockContext__tag = "\x2a" // canoto.Tag(5, canoto.Len)
)

type canotoData_Block struct {
	size int
}

// MakeCanoto creates a new empty value.
func (*Block) MakeCanoto() *Block {
	return new(Block)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *Block) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *Block) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			var length int64
			if err := canoto.ReadInt(&r, &length); err != nil {
				return err
			}

			const (
				expectedLength      = len(c.ParentID)
				expectedLengthInt64 = int64(expectedLength)
			)
			if length != expectedLengthInt64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy(c.ParentID[:], r.B)
			if canoto.IsZero(c.ParentID) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 2:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Height); err != nil {
				return err
			}
			if canoto.IsZero(c.Height) {
				return canoto.ErrZeroValue
			}
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Timestamp); err != nil {
				return err
			}
			if canoto.IsZero(c.Timestamp) {
				return canoto.ErrZeroValue
			}
		case 4:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			remainingBytes := r.B
			count, err := canoto.CountBytes(remainingBytes, canoto__Block__Chunks__tag)
			if err != nil {
				return err
			}

			c.Chunks = canoto.MakeSlice(c.Chunks, 1+count)
			if len(msgBytes) != 0 {
				r.B = msgBytes
				err = (&c.Chunks[0]).UnmarshalCanotoFrom(r)
				r.B = remainingBytes
				if err != nil {
					return err
				}
			}

			for i := range count {
				r.B = r.B[len(canoto__Block__Chunks__tag):]
				r.Unsafe = true
				err := canoto.ReadBytes(&r, &msgBytes)
				r.Unsafe = originalUnsafe
				if err != nil {
					return err
				}

				if len(msgBytes) != 0 {
					remainingBytes := r.B
					r.B = msgBytes
					err = (&c.Chunks[1+i]).UnmarshalCanotoFrom(r)
					r.B = remainingBytes
					if err != nil {
						return err
					}
				}
			}
		case 5:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.BlockContext = canoto.MakePointer(c.BlockContext)
			err = (c.BlockContext).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *Block) ValidCanoto() bool {
	if c == nil {
		return true
	}
	for i := range c.Chunks {
		if !(&c.Chunks[i]).ValidCanoto() {
			return false
		}
	}
	if c.BlockContext != nil && !(c.BlockContext).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *Block) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	if !canoto.IsZero(c.ParentID) {
		c.canotoData.size += len(canoto__Block__ParentID__tag) + canoto.SizeBytes(c.ParentID[:])
	}
	if !canoto.IsZero(c.Height) {
		c.canotoData.size += len(canoto__Block__Height__tag) + canoto.SizeInt(c.Height)
	}
	if !canoto.IsZero(c.Timestamp) {
		c.canotoData.size += len(canoto__Block__Timestamp__tag) + canoto.SizeInt(c.Timestamp)
	}
	for i := range c.Chunks {
		(&c.Chunks[i]).CalculateCanotoCache()
		fieldSize := (&c.Chunks[i]).CachedCanotoSize()
		c.canotoData.size += len(canoto__Block__Chunks__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if c.BlockContext != nil {
		(c.BlockContext).CalculateCanotoCache()
		if fieldSize := (c.BlockContext).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__Block__BlockContext__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		}
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *Block) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *Block) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *Block) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.ParentID) {
		canoto.Append(&w, canoto__Block__ParentID__tag)
		canoto.AppendBytes(&w, c.ParentID[:])
	}
	if !canoto.IsZero(c.Height) {
		canoto.Append(&w, canoto__Block__Height__tag)
		canoto.AppendInt(&w, c.Height)
	}
	if !canoto.IsZero(c.Timestamp) {
		canoto.Append(&w, canoto__Block__Timestamp__tag)
		canoto.AppendInt(&w, c.Timestamp)
	}
	for i := range c.Chunks {
		canoto.Append(&w, canoto__Block__Chunks__tag)
		canoto.AppendInt(&w, int64((&c.Chunks[i]).CachedCanotoSize()))
		w = (&c.Chunks[i]).MarshalCanotoInto(w)
	}
	if c.BlockContext != nil {
		if fieldSize := (c.BlockContext).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__Block__BlockContext__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.BlockContext).MarshalCanotoInto(w)
		}
	}
	return w
}
