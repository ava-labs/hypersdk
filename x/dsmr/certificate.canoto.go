// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.7.0
// source: certificate.go

package dsmr

import (
	"io"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__ChunkReference__ChunkID__tag  = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__ChunkReference__Producer__tag = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__ChunkReference__Expiry__tag   = "\x18" // canoto.Tag(3, canoto.Varint)
)

type canotoData_ChunkReference struct {
	// Enforce noCopy before atomic usage.
	// See https://github.com/StephenButtolph/canoto/pull/32
	_ atomic.Int64

	size int
}

// MakeCanoto creates a new empty value.
func (*ChunkReference) MakeCanoto() *ChunkReference {
	return new(ChunkReference)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *ChunkReference) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(&r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *ChunkReference) UnmarshalCanotoFrom(r *canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(r) {
		field, wireType, err := canoto.ReadTag(r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			var length int64
			if err := canoto.ReadInt(r, &length); err != nil {
				return err
			}

			const (
				expectedLength      = len(c.ChunkID)
				expectedLengthInt64 = int64(expectedLength)
			)
			if length != expectedLengthInt64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy(c.ChunkID[:], r.B)
			if canoto.IsZero(c.ChunkID) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			var length int64
			if err := canoto.ReadInt(r, &length); err != nil {
				return err
			}

			const (
				expectedLength      = len(c.Producer)
				expectedLengthInt64 = int64(expectedLength)
			)
			if length != expectedLengthInt64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy(c.Producer[:], r.B)
			if canoto.IsZero(c.Producer) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(r, &c.Expiry); err != nil {
				return err
			}
			if canoto.IsZero(c.Expiry) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *ChunkReference) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *ChunkReference) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	if !canoto.IsZero(c.ChunkID) {
		c.canotoData.size += len(canoto__ChunkReference__ChunkID__tag) + canoto.SizeBytes(c.ChunkID[:])
	}
	if !canoto.IsZero(c.Producer) {
		c.canotoData.size += len(canoto__ChunkReference__Producer__tag) + canoto.SizeBytes(c.Producer[:])
	}
	if !canoto.IsZero(c.Expiry) {
		c.canotoData.size += len(canoto__ChunkReference__Expiry__tag) + canoto.SizeInt(c.Expiry)
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *ChunkReference) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *ChunkReference) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	c.MarshalCanotoInto(&w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer. Most users should
// just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *ChunkReference) MarshalCanotoInto(w *canoto.Writer) {
	if c == nil {
		return
	}
	if !canoto.IsZero(c.ChunkID) {
		canoto.Append(w, canoto__ChunkReference__ChunkID__tag)
		canoto.AppendBytes(w, c.ChunkID[:])
	}
	if !canoto.IsZero(c.Producer) {
		canoto.Append(w, canoto__ChunkReference__Producer__tag)
		canoto.AppendBytes(w, c.Producer[:])
	}
	if !canoto.IsZero(c.Expiry) {
		canoto.Append(w, canoto__ChunkReference__Expiry__tag)
		canoto.AppendInt(w, c.Expiry)
	}
}
