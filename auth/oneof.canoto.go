// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.10.0
// source: auth/oneof.go

package auth

import (
	"io"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Int64

	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__OneOf__BLS__tag       = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__OneOf__ED25519__tag   = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__OneOf__SECP256R1__tag = "\x1a" // canoto.Tag(3, canoto.Len)
)

type canotoData_OneOf struct {
	// Enforce noCopy before atomic usage.
	// See https://github.com/StephenButtolph/canoto/pull/32
	_ atomic.Int64

	size int

	authOneOf uint32
}

// MakeCanoto creates a new empty value.
func (*OneOf) MakeCanoto() *OneOf {
	return new(OneOf)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *OneOf) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *OneOf) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.authOneOf != 0 {
				return canoto.ErrDuplicateOneOf
			}
			c.canotoData.authOneOf = 1

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.BLS = canoto.MakePointer(c.BLS)
			err = (c.BLS).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.authOneOf != 0 {
				return canoto.ErrDuplicateOneOf
			}
			c.canotoData.authOneOf = 2

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.ED25519 = canoto.MakePointer(c.ED25519)
			err = (c.ED25519).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.authOneOf != 0 {
				return canoto.ErrDuplicateOneOf
			}
			c.canotoData.authOneOf = 3

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.SECP256R1 = canoto.MakePointer(c.SECP256R1)
			err = (c.SECP256R1).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *OneOf) ValidCanoto() bool {
	if c == nil {
		return true
	}
	var (
		authOneOf uint32
	)
	if c.BLS != nil {
		(c.BLS).CalculateCanotoCache()
		if (c.BLS).CachedCanotoSize() != 0 {
			if authOneOf != 0 {
				return false
			}
			authOneOf = 1
		}
	}
	if c.ED25519 != nil {
		(c.ED25519).CalculateCanotoCache()
		if (c.ED25519).CachedCanotoSize() != 0 {
			if authOneOf != 0 {
				return false
			}
			authOneOf = 2
		}
	}
	if c.SECP256R1 != nil {
		(c.SECP256R1).CalculateCanotoCache()
		if (c.SECP256R1).CachedCanotoSize() != 0 {
			if authOneOf != 0 {
				return false
			}
			authOneOf = 3
		}
	}
	if c.BLS != nil && !(c.BLS).ValidCanoto() {
		return false
	}
	if c.ED25519 != nil && !(c.ED25519).ValidCanoto() {
		return false
	}
	if c.SECP256R1 != nil && !(c.SECP256R1).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *OneOf) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.authOneOf = 0
	c.canotoData.size = 0
	if c.BLS != nil {
		(c.BLS).CalculateCanotoCache()
		if fieldSize := (c.BLS).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__OneOf__BLS__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.authOneOf = 1
		}
	}
	if c.ED25519 != nil {
		(c.ED25519).CalculateCanotoCache()
		if fieldSize := (c.ED25519).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__OneOf__ED25519__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.authOneOf = 2
		}
	}
	if c.SECP256R1 != nil {
		(c.SECP256R1).CalculateCanotoCache()
		if fieldSize := (c.SECP256R1).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__OneOf__SECP256R1__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.authOneOf = 3
		}
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *OneOf) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// CachedWhichOneOfauth returns the previously calculated field number used
// to represent auth.
//
// This field is cached by UnmarshalCanoto, UnmarshalCanotoFrom, and
// CalculateCanotoCache.
//
// If the field has not yet been cached, it will return 0.
//
// If the struct has been modified since the field was last cached, the returned
// field number may be incorrect.
func (c *OneOf) CachedWhichOneOfauth() uint32 {
	return c.canotoData.authOneOf
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *OneOf) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *OneOf) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if c.BLS != nil {
		if fieldSize := (c.BLS).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__OneOf__BLS__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.BLS).MarshalCanotoInto(w)
		}
	}
	if c.ED25519 != nil {
		if fieldSize := (c.ED25519).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__OneOf__ED25519__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.ED25519).MarshalCanotoInto(w)
		}
	}
	if c.SECP256R1 != nil {
		if fieldSize := (c.SECP256R1).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__OneOf__SECP256R1__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.SECP256R1).MarshalCanotoInto(w)
		}
	}
	return w
}

const (
	canoto__OneOfFactory__ed25519Factory__tag   = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__OneOfFactory__blsFactory__tag       = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__OneOfFactory__secp256R1Factory__tag = "\x1a" // canoto.Tag(3, canoto.Len)
)

type canotoData_OneOfFactory struct {
	// Enforce noCopy before atomic usage.
	// See https://github.com/StephenButtolph/canoto/pull/32
	_ atomic.Int64

	size int

	factoryOneOf uint32
}

// MakeCanoto creates a new empty value.
func (*OneOfFactory) MakeCanoto() *OneOfFactory {
	return new(OneOfFactory)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *OneOfFactory) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *OneOfFactory) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.factoryOneOf != 0 {
				return canoto.ErrDuplicateOneOf
			}
			c.canotoData.factoryOneOf = 1

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.ed25519Factory = canoto.MakePointer(c.ed25519Factory)
			err = (c.ed25519Factory).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.factoryOneOf != 0 {
				return canoto.ErrDuplicateOneOf
			}
			c.canotoData.factoryOneOf = 2

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.blsFactory = canoto.MakePointer(c.blsFactory)
			err = (c.blsFactory).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.factoryOneOf != 0 {
				return canoto.ErrDuplicateOneOf
			}
			c.canotoData.factoryOneOf = 3

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.secp256R1Factory = canoto.MakePointer(c.secp256R1Factory)
			err = (c.secp256R1Factory).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *OneOfFactory) ValidCanoto() bool {
	if c == nil {
		return true
	}
	var (
		factoryOneOf uint32
	)
	if c.ed25519Factory != nil {
		(c.ed25519Factory).CalculateCanotoCache()
		if (c.ed25519Factory).CachedCanotoSize() != 0 {
			if factoryOneOf != 0 {
				return false
			}
			factoryOneOf = 1
		}
	}
	if c.blsFactory != nil {
		(c.blsFactory).CalculateCanotoCache()
		if (c.blsFactory).CachedCanotoSize() != 0 {
			if factoryOneOf != 0 {
				return false
			}
			factoryOneOf = 2
		}
	}
	if c.secp256R1Factory != nil {
		(c.secp256R1Factory).CalculateCanotoCache()
		if (c.secp256R1Factory).CachedCanotoSize() != 0 {
			if factoryOneOf != 0 {
				return false
			}
			factoryOneOf = 3
		}
	}
	if c.ed25519Factory != nil && !(c.ed25519Factory).ValidCanoto() {
		return false
	}
	if c.blsFactory != nil && !(c.blsFactory).ValidCanoto() {
		return false
	}
	if c.secp256R1Factory != nil && !(c.secp256R1Factory).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *OneOfFactory) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.factoryOneOf = 0
	c.canotoData.size = 0
	if c.ed25519Factory != nil {
		(c.ed25519Factory).CalculateCanotoCache()
		if fieldSize := (c.ed25519Factory).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__OneOfFactory__ed25519Factory__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.factoryOneOf = 1
		}
	}
	if c.blsFactory != nil {
		(c.blsFactory).CalculateCanotoCache()
		if fieldSize := (c.blsFactory).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__OneOfFactory__blsFactory__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.factoryOneOf = 2
		}
	}
	if c.secp256R1Factory != nil {
		(c.secp256R1Factory).CalculateCanotoCache()
		if fieldSize := (c.secp256R1Factory).CachedCanotoSize(); fieldSize != 0 {
			c.canotoData.size += len(canoto__OneOfFactory__secp256R1Factory__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.factoryOneOf = 3
		}
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *OneOfFactory) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// CachedWhichOneOffactory returns the previously calculated field number used
// to represent factory.
//
// This field is cached by UnmarshalCanoto, UnmarshalCanotoFrom, and
// CalculateCanotoCache.
//
// If the field has not yet been cached, it will return 0.
//
// If the struct has been modified since the field was last cached, the returned
// field number may be incorrect.
func (c *OneOfFactory) CachedWhichOneOffactory() uint32 {
	return c.canotoData.factoryOneOf
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *OneOfFactory) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *OneOfFactory) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if c.ed25519Factory != nil {
		if fieldSize := (c.ed25519Factory).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__OneOfFactory__ed25519Factory__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.ed25519Factory).MarshalCanotoInto(w)
		}
	}
	if c.blsFactory != nil {
		if fieldSize := (c.blsFactory).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__OneOfFactory__blsFactory__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.blsFactory).MarshalCanotoInto(w)
		}
	}
	if c.secp256R1Factory != nil {
		if fieldSize := (c.secp256R1Factory).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__OneOfFactory__secp256R1Factory__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.secp256R1Factory).MarshalCanotoInto(w)
		}
	}
	return w
}
