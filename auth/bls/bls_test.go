// Copyright (C) 2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package bls

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/ava-labs/hypersdk/crypto"
	"github.com/ava-labs/hypersdk/crypto/bls"
)

var privateKey = []byte{
	0x7, 0xb3, 0xc, 0x77, 0xf6, 0xd5, 0x8a, 0x83, 0x2f, 0x3a, 0x8d, 0xd9, 0x63, 0x1, 0x8b, 0x97,
	0x3d, 0x90, 0x80, 0xca, 0x7b, 0x6d, 0xed, 0x5f, 0x75, 0x5d, 0x34, 0xfb, 0xd9, 0x40, 0x67, 0xf6,
}

func TestBLSSignVerify(t *testing.T) {
	require := require.New(t)

	priv, err := bls.PrivateKeyFromBytes(privateKey)
	require.NoError(err)

	factory := NewBLSFactory(priv)

	tests := []struct {
		name              string
		message           []byte
		signature         []byte
		expectedSignature []byte
		err               error
	}{
		{
			name:    "hello world",
			message: []byte("hello world"),
			expectedSignature: []byte{
				0x97, 0xe5, 0xb0, 0x87, 0xa5,
				0x78, 0x68, 0x5a, 0xe4, 0x75,
				0x9f, 0x11, 0x0e, 0xd1, 0xe5,
				0xa6, 0xb6, 0x59, 0x26, 0x2d,
				0x97, 0x8f, 0x43, 0xff, 0x3e,
				0x8a, 0x05, 0x00, 0x47, 0x28,
				0x85, 0x1c, 0x03, 0x14, 0xcb,
				0x6c, 0x12, 0xb0, 0x4d, 0x4b,
				0xf1, 0x24, 0x22, 0x38, 0x82,
				0xca, 0xfa, 0x92, 0x19, 0x60,
				0x6d, 0x13, 0xf0, 0x69, 0xa7,
				0x5a, 0x90, 0x5e, 0x92, 0x88,
				0xd3, 0xe2, 0x51, 0x06, 0x0a,
				0xc1, 0x58, 0x23, 0x9e, 0x27,
				0xe9, 0xf2, 0x5a, 0x6d, 0x52,
				0xf2, 0x05, 0xe8, 0xcc, 0x87,
				0x10, 0x5b, 0xb7, 0x6a, 0x0d,
				0x3c, 0x43, 0x3c, 0xb3, 0xa8,
				0x2d, 0x15, 0xcc, 0x54, 0x44,
				0xa0,
			},
		},
		{
			name:    "valid sig long string",
			message: []byte("a really long string"),
			expectedSignature: []byte{
				0x8d, 0xe8, 0x27, 0x0d, 0x1a,
				0xeb, 0xd4, 0xe4, 0xd3, 0x3f,
				0x38, 0xca, 0x7d, 0xe5, 0x8d,
				0x1e, 0xb8, 0x2a, 0x79, 0xfe,
				0x86, 0xd1, 0x58, 0xc3, 0x9c,
				0xe4, 0x6f, 0x33, 0x76, 0x87,
				0x87, 0x45, 0x74, 0x1b, 0x6a,
				0x30, 0x0b, 0x98, 0x36, 0x58,
				0x5b, 0xe1, 0xd4, 0x0e, 0xb6,
				0xe4, 0x67, 0xf9, 0x12, 0x52,
				0x49, 0x56, 0xc9, 0xad, 0xa6,
				0xf8, 0x1f, 0xd1, 0xf7, 0x4f,
				0x45, 0x80, 0x0e, 0xd2, 0x2f,
				0x1a, 0xb4, 0x25, 0xc1, 0x12,
				0xf5, 0x71, 0x2a, 0xb1, 0x5e,
				0x23, 0x38, 0xae, 0x6d, 0x26,
				0x8c, 0x5b, 0xa0, 0x25, 0xd2,
				0xeb, 0xfa, 0x96, 0xab, 0xda,
				0xb6, 0x81, 0x0a, 0xcc, 0x7,
				0x29,
			},
		},
		{
			name:    "wrong signature",
			message: []byte("hello world"),
			// sig of "hello, world"
			signature: []byte{
				0xb2, 0xae, 0xab, 0xe7, 0x6,
				0x22, 0x4e, 0x8e, 0x8d, 0xba,
				0xd5, 0x88, 0x58, 0x30, 0x8b,
				0xe4, 0x12, 0x86, 0x5e, 0x4f,
				0x5f, 0x25, 0x54, 0xeb, 0xff,
				0x3c, 0x96, 0xb8, 0xc4, 0x4b,
				0xb6, 0x32, 0xeb, 0xf0, 0x38,
				0xc3, 0xf8, 0x7e, 0xe7, 0xcc,
				0x6d, 0xb5, 0x99, 0x78, 0x21,
				0xe5, 0xb0, 0x20, 0x3, 0x38,
				0x68, 0xc6, 0xe8, 0x98, 0xb5,
				0x63, 0x40, 0x97, 0x6, 0x7,
				0x2d, 0x25, 0xe, 0x65, 0xdf,
				0x75, 0xee, 0xaf, 0x59, 0xcb,
				0x21, 0x4a, 0x22, 0xeb, 0x66,
				0x9e, 0x75, 0x8b, 0x35, 0xfe,
				0xa3, 0x41, 0x29, 0x8a, 0x8a,
				0x3c, 0x13, 0xf, 0xb5, 0x86,
				0x6a, 0xd2, 0x3e, 0x1b, 0xe6,
				0x2f,
			},
			err: crypto.ErrInvalidSignature,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			auth, err := factory.Sign(tt.message)
			require.NoError(err)
			b := auth.(*BLS)
			signatureBytes := bls.SignatureToBytes(b.Signature)

			if tt.expectedSignature != nil {
				require.Equal(tt.expectedSignature, signatureBytes)
			}

			if tt.signature != nil {
				signature, err := bls.SignatureFromBytes(tt.signature)
				require.NoError(err)
				b.Signature = signature
			}

			ctx := context.Background()
			err = auth.Verify(ctx, tt.message)
			require.Equal(tt.err, err)
		})
	}
}
