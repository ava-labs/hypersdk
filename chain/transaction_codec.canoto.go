// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.10.0
// source: chain/transaction_codec.go

package chain

import (
	"io"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Int64

	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__SerializeTx__Base__tag    = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__SerializeTx__Actions__tag = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__SerializeTx__Auth__tag    = "\x1a" // canoto.Tag(3, canoto.Len)
)

type canotoData_SerializeTx struct {
	size int
}

// MakeCanoto creates a new empty value.
func (*SerializeTx) MakeCanoto() *SerializeTx {
	return new(SerializeTx)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *SerializeTx) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *SerializeTx) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = (&c.Base).UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			err := canoto.ReadBytes(&r, new([]byte))
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			count, err := canoto.CountBytes(r.B, canoto__SerializeTx__Actions__tag)
			if err != nil {
				return err
			}
			c.Actions = canoto.MakeSlice(c.Actions, 1+count)

			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.Actions[0]); err != nil {
				return err
			}
			for i := range count {
				r.B = r.B[len(canoto__SerializeTx__Actions__tag):]
				if err := canoto.ReadBytes(&r, &c.Actions[1+i]); err != nil {
					return err
				}
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.Auth); err != nil {
				return err
			}
			if len(c.Auth) == 0 {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *SerializeTx) ValidCanoto() bool {
	if c == nil {
		return true
	}
	if !(&c.Base).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *SerializeTx) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	(&c.Base).CalculateCanotoCache()
	if fieldSize := (&c.Base).CachedCanotoSize(); fieldSize != 0 {
		c.canotoData.size += len(canoto__SerializeTx__Base__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	for _, v := range c.Actions {
		c.canotoData.size += len(canoto__SerializeTx__Actions__tag) + canoto.SizeBytes(v)
	}
	if len(c.Auth) != 0 {
		c.canotoData.size += len(canoto__SerializeTx__Auth__tag) + canoto.SizeBytes(c.Auth)
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *SerializeTx) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *SerializeTx) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *SerializeTx) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if fieldSize := (&c.Base).CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(&w, canoto__SerializeTx__Base__tag)
		canoto.AppendInt(&w, int64(fieldSize))
		w = (&c.Base).MarshalCanotoInto(w)
	}
	for _, v := range c.Actions {
		canoto.Append(&w, canoto__SerializeTx__Actions__tag)
		canoto.AppendBytes(&w, v)
	}
	if len(c.Auth) != 0 {
		canoto.Append(&w, canoto__SerializeTx__Auth__tag)
		canoto.AppendBytes(&w, c.Auth)
	}
	return w
}
