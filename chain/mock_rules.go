// Copyright (C) 2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/hypersdk/chain (interfaces: Rules)

// Package chain is a generated GoMock package.
package chain

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockRules is a mock of Rules interface.
type MockRules struct {
	ctrl     *gomock.Controller
	recorder *MockRulesMockRecorder
}

// MockRulesMockRecorder is the mock recorder for MockRules.
type MockRulesMockRecorder struct {
	mock *MockRules
}

// NewMockRules creates a new mock instance.
func NewMockRules(ctrl *gomock.Controller) *MockRules {
	mock := &MockRules{ctrl: ctrl}
	mock.recorder = &MockRulesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRules) EXPECT() *MockRulesMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockRules) ChainID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockRulesMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockRules)(nil).ChainID))
}

// FetchCustom mocks base method.
func (m *MockRules) FetchCustom(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCustom", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FetchCustom indicates an expected call of FetchCustom.
func (mr *MockRulesMockRecorder) FetchCustom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCustom", reflect.TypeOf((*MockRules)(nil).FetchCustom), arg0)
}

// GetBaseComputeUnits mocks base method.
func (m *MockRules) GetBaseComputeUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseComputeUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBaseComputeUnits indicates an expected call of GetBaseComputeUnits.
func (mr *MockRulesMockRecorder) GetBaseComputeUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseComputeUnits", reflect.TypeOf((*MockRules)(nil).GetBaseComputeUnits))
}

// GetBaseWarpComputeUnits mocks base method.
func (m *MockRules) GetBaseWarpComputeUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseWarpComputeUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBaseWarpComputeUnits indicates an expected call of GetBaseWarpComputeUnits.
func (mr *MockRulesMockRecorder) GetBaseWarpComputeUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseWarpComputeUnits", reflect.TypeOf((*MockRules)(nil).GetBaseWarpComputeUnits))
}

// GetColdStorageKeyModificationUnits mocks base method.
func (m *MockRules) GetColdStorageKeyModificationUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColdStorageKeyModificationUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetColdStorageKeyModificationUnits indicates an expected call of GetColdStorageKeyModificationUnits.
func (mr *MockRulesMockRecorder) GetColdStorageKeyModificationUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColdStorageKeyModificationUnits", reflect.TypeOf((*MockRules)(nil).GetColdStorageKeyModificationUnits))
}

// GetColdStorageKeyReadUnits mocks base method.
func (m *MockRules) GetColdStorageKeyReadUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColdStorageKeyReadUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetColdStorageKeyReadUnits indicates an expected call of GetColdStorageKeyReadUnits.
func (mr *MockRulesMockRecorder) GetColdStorageKeyReadUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColdStorageKeyReadUnits", reflect.TypeOf((*MockRules)(nil).GetColdStorageKeyReadUnits))
}

// GetColdStorageValueModificationUnits mocks base method.
func (m *MockRules) GetColdStorageValueModificationUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColdStorageValueModificationUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetColdStorageValueModificationUnits indicates an expected call of GetColdStorageValueModificationUnits.
func (mr *MockRulesMockRecorder) GetColdStorageValueModificationUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColdStorageValueModificationUnits", reflect.TypeOf((*MockRules)(nil).GetColdStorageValueModificationUnits))
}

// GetColdStorageValueReadUnits mocks base method.
func (m *MockRules) GetColdStorageValueReadUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColdStorageValueReadUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetColdStorageValueReadUnits indicates an expected call of GetColdStorageValueReadUnits.
func (mr *MockRulesMockRecorder) GetColdStorageValueReadUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColdStorageValueReadUnits", reflect.TypeOf((*MockRules)(nil).GetColdStorageValueReadUnits))
}

// GetMaxBlockUnits mocks base method.
func (m *MockRules) GetMaxBlockUnits() Dimensions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBlockUnits")
	ret0, _ := ret[0].(Dimensions)
	return ret0
}

// GetMaxBlockUnits indicates an expected call of GetMaxBlockUnits.
func (mr *MockRulesMockRecorder) GetMaxBlockUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBlockUnits", reflect.TypeOf((*MockRules)(nil).GetMaxBlockUnits))
}

// GetMinBlockGap mocks base method.
func (m *MockRules) GetMinBlockGap() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinBlockGap")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMinBlockGap indicates an expected call of GetMinBlockGap.
func (mr *MockRulesMockRecorder) GetMinBlockGap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinBlockGap", reflect.TypeOf((*MockRules)(nil).GetMinBlockGap))
}

// GetMinEmptyBlockGap mocks base method.
func (m *MockRules) GetMinEmptyBlockGap() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinEmptyBlockGap")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMinEmptyBlockGap indicates an expected call of GetMinEmptyBlockGap.
func (mr *MockRulesMockRecorder) GetMinEmptyBlockGap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinEmptyBlockGap", reflect.TypeOf((*MockRules)(nil).GetMinEmptyBlockGap))
}

// GetMinUnitPrice mocks base method.
func (m *MockRules) GetMinUnitPrice() Dimensions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinUnitPrice")
	ret0, _ := ret[0].(Dimensions)
	return ret0
}

// GetMinUnitPrice indicates an expected call of GetMinUnitPrice.
func (mr *MockRulesMockRecorder) GetMinUnitPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinUnitPrice", reflect.TypeOf((*MockRules)(nil).GetMinUnitPrice))
}

// GetOutgoingWarpComputeUnits mocks base method.
func (m *MockRules) GetOutgoingWarpComputeUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutgoingWarpComputeUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetOutgoingWarpComputeUnits indicates an expected call of GetOutgoingWarpComputeUnits.
func (mr *MockRulesMockRecorder) GetOutgoingWarpComputeUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingWarpComputeUnits", reflect.TypeOf((*MockRules)(nil).GetOutgoingWarpComputeUnits))
}

// GetStorageKeyCreateUnits mocks base method.
func (m *MockRules) GetStorageKeyCreateUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageKeyCreateUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStorageKeyCreateUnits indicates an expected call of GetStorageKeyCreateUnits.
func (mr *MockRulesMockRecorder) GetStorageKeyCreateUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageKeyCreateUnits", reflect.TypeOf((*MockRules)(nil).GetStorageKeyCreateUnits))
}

// GetStorageValueCreateUnits mocks base method.
func (m *MockRules) GetStorageValueCreateUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageValueCreateUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStorageValueCreateUnits indicates an expected call of GetStorageValueCreateUnits.
func (mr *MockRulesMockRecorder) GetStorageValueCreateUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageValueCreateUnits", reflect.TypeOf((*MockRules)(nil).GetStorageValueCreateUnits))
}

// GetUnitPriceChangeDenominator mocks base method.
func (m *MockRules) GetUnitPriceChangeDenominator() Dimensions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPriceChangeDenominator")
	ret0, _ := ret[0].(Dimensions)
	return ret0
}

// GetUnitPriceChangeDenominator indicates an expected call of GetUnitPriceChangeDenominator.
func (mr *MockRulesMockRecorder) GetUnitPriceChangeDenominator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPriceChangeDenominator", reflect.TypeOf((*MockRules)(nil).GetUnitPriceChangeDenominator))
}

// GetValidityWindow mocks base method.
func (m *MockRules) GetValidityWindow() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidityWindow")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetValidityWindow indicates an expected call of GetValidityWindow.
func (mr *MockRulesMockRecorder) GetValidityWindow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidityWindow", reflect.TypeOf((*MockRules)(nil).GetValidityWindow))
}

// GetWarmStorageKeyModificationUnits mocks base method.
func (m *MockRules) GetWarmStorageKeyModificationUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarmStorageKeyModificationUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWarmStorageKeyModificationUnits indicates an expected call of GetWarmStorageKeyModificationUnits.
func (mr *MockRulesMockRecorder) GetWarmStorageKeyModificationUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarmStorageKeyModificationUnits", reflect.TypeOf((*MockRules)(nil).GetWarmStorageKeyModificationUnits))
}

// GetWarmStorageKeyReadUnits mocks base method.
func (m *MockRules) GetWarmStorageKeyReadUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarmStorageKeyReadUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWarmStorageKeyReadUnits indicates an expected call of GetWarmStorageKeyReadUnits.
func (mr *MockRulesMockRecorder) GetWarmStorageKeyReadUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarmStorageKeyReadUnits", reflect.TypeOf((*MockRules)(nil).GetWarmStorageKeyReadUnits))
}

// GetWarmStorageValueModificationUnits mocks base method.
func (m *MockRules) GetWarmStorageValueModificationUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarmStorageValueModificationUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWarmStorageValueModificationUnits indicates an expected call of GetWarmStorageValueModificationUnits.
func (mr *MockRulesMockRecorder) GetWarmStorageValueModificationUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarmStorageValueModificationUnits", reflect.TypeOf((*MockRules)(nil).GetWarmStorageValueModificationUnits))
}

// GetWarmStorageValueReadUnits mocks base method.
func (m *MockRules) GetWarmStorageValueReadUnits() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarmStorageValueReadUnits")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWarmStorageValueReadUnits indicates an expected call of GetWarmStorageValueReadUnits.
func (mr *MockRulesMockRecorder) GetWarmStorageValueReadUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarmStorageValueReadUnits", reflect.TypeOf((*MockRules)(nil).GetWarmStorageValueReadUnits))
}

// GetWarpComputeUnitsPerSigner mocks base method.
func (m *MockRules) GetWarpComputeUnitsPerSigner() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarpComputeUnitsPerSigner")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWarpComputeUnitsPerSigner indicates an expected call of GetWarpComputeUnitsPerSigner.
func (mr *MockRulesMockRecorder) GetWarpComputeUnitsPerSigner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarpComputeUnitsPerSigner", reflect.TypeOf((*MockRules)(nil).GetWarpComputeUnitsPerSigner))
}

// GetWarpConfig mocks base method.
func (m *MockRules) GetWarpConfig(arg0 ids.ID) (bool, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarpConfig", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	return ret0, ret1, ret2
}

// GetWarpConfig indicates an expected call of GetWarpConfig.
func (mr *MockRulesMockRecorder) GetWarpConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarpConfig", reflect.TypeOf((*MockRules)(nil).GetWarpConfig), arg0)
}

// GetWindowTargetUnits mocks base method.
func (m *MockRules) GetWindowTargetUnits() Dimensions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowTargetUnits")
	ret0, _ := ret[0].(Dimensions)
	return ret0
}

// GetWindowTargetUnits indicates an expected call of GetWindowTargetUnits.
func (mr *MockRulesMockRecorder) GetWindowTargetUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowTargetUnits", reflect.TypeOf((*MockRules)(nil).GetWindowTargetUnits))
}

// NetworkID mocks base method.
func (m *MockRules) NetworkID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// NetworkID indicates an expected call of NetworkID.
func (mr *MockRulesMockRecorder) NetworkID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkID", reflect.TypeOf((*MockRules)(nil).NetworkID))
}
