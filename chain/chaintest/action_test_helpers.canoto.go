// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.10.0
// source: chain/chaintest/action_test_helpers.go

package chaintest

import (
	"io"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Int64

	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__TestAction__NumComputeUnits__tag              = "\x09" // canoto.Tag(1, canoto.I64)
	canoto__TestAction__SpecifiedStateKeys__tag           = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__TestAction__SpecifiedStateKeyPermissions__tag = "\x1a" // canoto.Tag(3, canoto.Len)
	canoto__TestAction__ReadKeys__tag                     = "\x22" // canoto.Tag(4, canoto.Len)
	canoto__TestAction__WriteKeys__tag                    = "\x2a" // canoto.Tag(5, canoto.Len)
	canoto__TestAction__WriteValues__tag                  = "\x32" // canoto.Tag(6, canoto.Len)
	canoto__TestAction__ExecuteErr__tag                   = "\x38" // canoto.Tag(7, canoto.Varint)
	canoto__TestAction__Nonce__tag                        = "\x41" // canoto.Tag(8, canoto.I64)
	canoto__TestAction__Output__tag                       = "\x4a" // canoto.Tag(9, canoto.Len)
)

type canotoData_TestAction struct {
	// Enforce noCopy before atomic usage.
	// See https://github.com/StephenButtolph/canoto/pull/32
	_ atomic.Int64

	size                             int
	SpecifiedStateKeyPermissionsSize int
}

// MakeCanoto creates a new empty value.
func (*TestAction) MakeCanoto() *TestAction {
	return new(TestAction)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
func (c *TestAction) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// OneOf fields are cached during the unmarshaling process.
//
// The struct is not cleared before unmarshaling, any fields not present in the
// bytes will retain their previous values. If a OneOf field was previously
// cached as being set, attempting to unmarshal that OneOf again will return
// canoto.ErrDuplicateOneOf.
//
// This function enables configuration of reader options.
func (c *TestAction) UnmarshalCanotoFrom(r canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.NumComputeUnits); err != nil {
				return err
			}
			if canoto.IsZero(c.NumComputeUnits) {
				return canoto.ErrZeroValue
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			err := canoto.ReadBytes(&r, new([]byte))
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			count, err := canoto.CountBytes(r.B, canoto__TestAction__SpecifiedStateKeys__tag)
			if err != nil {
				return err
			}
			c.SpecifiedStateKeys = canoto.MakeSlice(c.SpecifiedStateKeys, 1+count)

			r.B = remainingBytes
			if err := canoto.ReadString(&r, &c.SpecifiedStateKeys[0]); err != nil {
				return err
			}
			for i := range count {
				r.B = r.B[len(canoto__TestAction__SpecifiedStateKeys__tag):]
				if err := canoto.ReadString(&r, &c.SpecifiedStateKeys[1+i]); err != nil {
					return err
				}
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			err := canoto.ReadBytes(&r, &msgBytes)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.SpecifiedStateKeyPermissions = canoto.MakeSlice(c.SpecifiedStateKeyPermissions, canoto.CountInts(msgBytes))
			for i := range c.SpecifiedStateKeyPermissions {
				if err := canoto.ReadInt(&r, &c.SpecifiedStateKeyPermissions[i]); err != nil {
					r.B = remainingBytes
					return err
				}
			}
			hasNext := canoto.HasNext(&r)
			r.B = remainingBytes
			if hasNext {
				return canoto.ErrInvalidLength
			}
		case 4:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			err := canoto.ReadBytes(&r, new([]byte))
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			count, err := canoto.CountBytes(r.B, canoto__TestAction__ReadKeys__tag)
			if err != nil {
				return err
			}
			c.ReadKeys = canoto.MakeSlice(c.ReadKeys, 1+count)

			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.ReadKeys[0]); err != nil {
				return err
			}
			for i := range count {
				r.B = r.B[len(canoto__TestAction__ReadKeys__tag):]
				if err := canoto.ReadBytes(&r, &c.ReadKeys[1+i]); err != nil {
					return err
				}
			}
		case 5:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			err := canoto.ReadBytes(&r, new([]byte))
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			count, err := canoto.CountBytes(r.B, canoto__TestAction__WriteKeys__tag)
			if err != nil {
				return err
			}
			c.WriteKeys = canoto.MakeSlice(c.WriteKeys, 1+count)

			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.WriteKeys[0]); err != nil {
				return err
			}
			for i := range count {
				r.B = r.B[len(canoto__TestAction__WriteKeys__tag):]
				if err := canoto.ReadBytes(&r, &c.WriteKeys[1+i]); err != nil {
					return err
				}
			}
		case 6:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			err := canoto.ReadBytes(&r, new([]byte))
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			count, err := canoto.CountBytes(r.B, canoto__TestAction__WriteValues__tag)
			if err != nil {
				return err
			}
			c.WriteValues = canoto.MakeSlice(c.WriteValues, 1+count)

			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.WriteValues[0]); err != nil {
				return err
			}
			for i := range count {
				r.B = r.B[len(canoto__TestAction__WriteValues__tag):]
				if err := canoto.ReadBytes(&r, &c.WriteValues[1+i]); err != nil {
					return err
				}
			}
		case 7:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBool(&r, &c.ExecuteErr); err != nil {
				return err
			}
			if canoto.IsZero(c.ExecuteErr) {
				return canoto.ErrZeroValue
			}
		case 8:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.Nonce); err != nil {
				return err
			}
			if canoto.IsZero(c.Nonce) {
				return canoto.ErrZeroValue
			}
		case 9:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.Output); err != nil {
				return err
			}
			if len(c.Output) == 0 {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *TestAction) ValidCanoto() bool {
	if c == nil {
		return true
	}
	for _, v := range c.SpecifiedStateKeys {
		if !utf8.ValidString(string(v)) {
			return false
		}
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
//
// It is not safe to call this function concurrently.
func (c *TestAction) CalculateCanotoCache() {
	if c == nil {
		return
	}
	c.canotoData.size = 0
	if !canoto.IsZero(c.NumComputeUnits) {
		c.canotoData.size += len(canoto__TestAction__NumComputeUnits__tag) + canoto.SizeFint64
	}
	for _, v := range c.SpecifiedStateKeys {
		c.canotoData.size += len(canoto__TestAction__SpecifiedStateKeys__tag) + canoto.SizeBytes(v)
	}
	if len(c.SpecifiedStateKeyPermissions) != 0 {
		c.canotoData.SpecifiedStateKeyPermissionsSize = 0
		for _, v := range c.SpecifiedStateKeyPermissions {
			c.canotoData.SpecifiedStateKeyPermissionsSize += canoto.SizeInt(v)
		}
		c.canotoData.size += len(canoto__TestAction__SpecifiedStateKeyPermissions__tag) + canoto.SizeInt(int64(c.canotoData.SpecifiedStateKeyPermissionsSize)) + c.canotoData.SpecifiedStateKeyPermissionsSize
	}
	for _, v := range c.ReadKeys {
		c.canotoData.size += len(canoto__TestAction__ReadKeys__tag) + canoto.SizeBytes(v)
	}
	for _, v := range c.WriteKeys {
		c.canotoData.size += len(canoto__TestAction__WriteKeys__tag) + canoto.SizeBytes(v)
	}
	for _, v := range c.WriteValues {
		c.canotoData.size += len(canoto__TestAction__WriteValues__tag) + canoto.SizeBytes(v)
	}
	if !canoto.IsZero(c.ExecuteErr) {
		c.canotoData.size += len(canoto__TestAction__ExecuteErr__tag) + canoto.SizeBool
	}
	if !canoto.IsZero(c.Nonce) {
		c.canotoData.size += len(canoto__TestAction__Nonce__tag) + canoto.SizeFint64
	}
	if len(c.Output) != 0 {
		c.canotoData.size += len(canoto__TestAction__Output__tag) + canoto.SizeBytes(c.Output)
	}
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *TestAction) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return c.canotoData.size
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *TestAction) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
//
// It is not safe to call this function concurrently.
func (c *TestAction) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.NumComputeUnits) {
		canoto.Append(&w, canoto__TestAction__NumComputeUnits__tag)
		canoto.AppendFint64(&w, c.NumComputeUnits)
	}
	for _, v := range c.SpecifiedStateKeys {
		canoto.Append(&w, canoto__TestAction__SpecifiedStateKeys__tag)
		canoto.AppendBytes(&w, v)
	}
	if len(c.SpecifiedStateKeyPermissions) != 0 {
		canoto.Append(&w, canoto__TestAction__SpecifiedStateKeyPermissions__tag)
		canoto.AppendInt(&w, int64(c.canotoData.SpecifiedStateKeyPermissionsSize))
		for _, v := range c.SpecifiedStateKeyPermissions {
			canoto.AppendInt(&w, v)
		}
	}
	for _, v := range c.ReadKeys {
		canoto.Append(&w, canoto__TestAction__ReadKeys__tag)
		canoto.AppendBytes(&w, v)
	}
	for _, v := range c.WriteKeys {
		canoto.Append(&w, canoto__TestAction__WriteKeys__tag)
		canoto.AppendBytes(&w, v)
	}
	for _, v := range c.WriteValues {
		canoto.Append(&w, canoto__TestAction__WriteValues__tag)
		canoto.AppendBytes(&w, v)
	}
	if !canoto.IsZero(c.ExecuteErr) {
		canoto.Append(&w, canoto__TestAction__ExecuteErr__tag)
		canoto.AppendBool(&w, true)
	}
	if !canoto.IsZero(c.Nonce) {
		canoto.Append(&w, canoto__TestAction__Nonce__tag)
		canoto.AppendFint64(&w, c.Nonce)
	}
	if len(c.Output) != 0 {
		canoto.Append(&w, canoto__TestAction__Output__tag)
		canoto.AppendBytes(&w, c.Output)
	}
	return w
}
