// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.15.0
// source: action.go

package chaintest

import (
	"io"
	"reflect"
	"sync/atomic"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Uint64

	_ = io.ErrUnexpectedEOF
)

const (
	canoto__TestAction__NumComputeUnits__tag              = "\x08" // canoto.Tag(1, canoto.Varint)
	canoto__TestAction__SpecifiedStateKeys__tag           = "\x12" // canoto.Tag(2, canoto.Len)
	canoto__TestAction__SpecifiedStateKeyPermissions__tag = "\x1a" // canoto.Tag(3, canoto.Len)
	canoto__TestAction__ReadKeys__tag                     = "\x22" // canoto.Tag(4, canoto.Len)
	canoto__TestAction__WriteKeys__tag                    = "\x2a" // canoto.Tag(5, canoto.Len)
	canoto__TestAction__WriteValues__tag                  = "\x32" // canoto.Tag(6, canoto.Len)
	canoto__TestAction__ExecuteErr__tag                   = "\x38" // canoto.Tag(7, canoto.Varint)
	canoto__TestAction__Nonce__tag                        = "\x40" // canoto.Tag(8, canoto.Varint)
	canoto__TestAction__Start__tag                        = "\x48" // canoto.Tag(9, canoto.Varint)
	canoto__TestAction__End__tag                          = "\x50" // canoto.Tag(10, canoto.Varint)
)

type canotoData_TestAction struct {
	size                             atomic.Uint64
	SpecifiedStateKeyPermissionsSize atomic.Uint64
}

// CanotoSpec returns the specification of this canoto message.
func (*TestAction) CanotoSpec(...reflect.Type) *canoto.Spec {
	var zero TestAction
	s := &canoto.Spec{
		Name: "TestAction",
		Fields: []canoto.FieldType{
			{
				FieldNumber: 1,
				Name:        "NumComputeUnits",
				OneOf:       "",
				TypeUint:    canoto.SizeOf(zero.NumComputeUnits),
			},
			{
				FieldNumber: 2,
				Name:        "SpecifiedStateKeys",
				Repeated:    true,
				OneOf:       "",
				TypeString:  true,
			},
			{
				FieldNumber: 3,
				Name:        "SpecifiedStateKeyPermissions",
				Repeated:    true,
				OneOf:       "",
				TypeUint:    canoto.SizeOf(canoto.MakeEntry(zero.SpecifiedStateKeyPermissions)),
			},
			{
				FieldNumber: 4,
				Name:        "ReadKeys",
				Repeated:    true,
				OneOf:       "",
				TypeBytes:   true,
			},
			{
				FieldNumber: 5,
				Name:        "WriteKeys",
				Repeated:    true,
				OneOf:       "",
				TypeBytes:   true,
			},
			{
				FieldNumber: 6,
				Name:        "WriteValues",
				Repeated:    true,
				OneOf:       "",
				TypeBytes:   true,
			},
			{
				FieldNumber: 7,
				Name:        "ExecuteErr",
				OneOf:       "",
				TypeBool:    true,
			},
			{
				FieldNumber: 8,
				Name:        "Nonce",
				OneOf:       "",
				TypeUint:    canoto.SizeOf(zero.Nonce),
			},
			{
				FieldNumber: 9,
				Name:        "Start",
				OneOf:       "",
				TypeInt:     canoto.SizeOf(zero.Start),
			},
			{
				FieldNumber: 10,
				Name:        "End",
				OneOf:       "",
				TypeInt:     canoto.SizeOf(zero.End),
			},
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*TestAction) MakeCanoto() *TestAction {
	return new(TestAction)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *TestAction) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *TestAction) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = TestAction{}
	c.canotoData.size.Store(uint64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadUint(&r, &c.NumComputeUnits); err != nil {
				return err
			}
			if canoto.IsZero(c.NumComputeUnits) {
				return canoto.ErrZeroValue
			}
		case 2:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__TestAction__SpecifiedStateKeys__tag)
			if err != nil {
				return err
			}
			c.SpecifiedStateKeys = canoto.MakeSlice(c.SpecifiedStateKeys, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadString(&r, &c.SpecifiedStateKeys[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__TestAction__SpecifiedStateKeys__tag):]
				if err := canoto.ReadString(&r, &c.SpecifiedStateKeys[1+i]); err != nil {
					return err
				}
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.SpecifiedStateKeyPermissions = canoto.MakeSlice(c.SpecifiedStateKeyPermissions, canoto.CountInts(msgBytes))
			for i := range c.SpecifiedStateKeyPermissions {
				if err := canoto.ReadUint(&r, &c.SpecifiedStateKeyPermissions[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.SpecifiedStateKeyPermissionsSize.Store(uint64(len(msgBytes)))
		case 4:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__TestAction__ReadKeys__tag)
			if err != nil {
				return err
			}
			c.ReadKeys = canoto.MakeSlice(c.ReadKeys, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.ReadKeys[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__TestAction__ReadKeys__tag):]
				if err := canoto.ReadBytes(&r, &c.ReadKeys[1+i]); err != nil {
					return err
				}
			}
		case 5:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__TestAction__WriteKeys__tag)
			if err != nil {
				return err
			}
			c.WriteKeys = canoto.MakeSlice(c.WriteKeys, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.WriteKeys[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__TestAction__WriteKeys__tag):]
				if err := canoto.ReadBytes(&r, &c.WriteKeys[1+i]); err != nil {
					return err
				}
			}
		case 6:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__TestAction__WriteValues__tag)
			if err != nil {
				return err
			}
			c.WriteValues = canoto.MakeSlice(c.WriteValues, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.WriteValues[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__TestAction__WriteValues__tag):]
				if err := canoto.ReadBytes(&r, &c.WriteValues[1+i]); err != nil {
					return err
				}
			}
		case 7:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBool(&r, &c.ExecuteErr); err != nil {
				return err
			}
			if canoto.IsZero(c.ExecuteErr) {
				return canoto.ErrZeroValue
			}
		case 8:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadUint(&r, &c.Nonce); err != nil {
				return err
			}
			if canoto.IsZero(c.Nonce) {
				return canoto.ErrZeroValue
			}
		case 9:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Start); err != nil {
				return err
			}
			if canoto.IsZero(c.Start) {
				return canoto.ErrZeroValue
			}
		case 10:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.End); err != nil {
				return err
			}
			if canoto.IsZero(c.End) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *TestAction) ValidCanoto() bool {
	if c == nil {
		return true
	}
	for _, v := range c.SpecifiedStateKeys {
		if !canoto.ValidString(v) {
			return false
		}
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *TestAction) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var size uint64
	if !canoto.IsZero(c.NumComputeUnits) {
		size += uint64(len(canoto__TestAction__NumComputeUnits__tag)) + canoto.SizeUint(c.NumComputeUnits)
	}
	for _, v := range c.SpecifiedStateKeys {
		size += uint64(len(canoto__TestAction__SpecifiedStateKeys__tag)) + canoto.SizeBytes(v)
	}
	if len(c.SpecifiedStateKeyPermissions) != 0 {
		var fieldSize uint64
		for _, v := range c.SpecifiedStateKeyPermissions {
			fieldSize += canoto.SizeUint(v)
		}
		size += uint64(len(canoto__TestAction__SpecifiedStateKeyPermissions__tag)) + canoto.SizeUint(fieldSize) + fieldSize
		c.canotoData.SpecifiedStateKeyPermissionsSize.Store(fieldSize)
	}
	for _, v := range c.ReadKeys {
		size += uint64(len(canoto__TestAction__ReadKeys__tag)) + canoto.SizeBytes(v)
	}
	for _, v := range c.WriteKeys {
		size += uint64(len(canoto__TestAction__WriteKeys__tag)) + canoto.SizeBytes(v)
	}
	for _, v := range c.WriteValues {
		size += uint64(len(canoto__TestAction__WriteValues__tag)) + canoto.SizeBytes(v)
	}
	if !canoto.IsZero(c.ExecuteErr) {
		size += uint64(len(canoto__TestAction__ExecuteErr__tag)) + canoto.SizeBool
	}
	if !canoto.IsZero(c.Nonce) {
		size += uint64(len(canoto__TestAction__Nonce__tag)) + canoto.SizeUint(c.Nonce)
	}
	if !canoto.IsZero(c.Start) {
		size += uint64(len(canoto__TestAction__Start__tag)) + canoto.SizeInt(c.Start)
	}
	if !canoto.IsZero(c.End) {
		size += uint64(len(canoto__TestAction__End__tag)) + canoto.SizeInt(c.End)
	}
	c.canotoData.size.Store(size)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *TestAction) CachedCanotoSize() uint64 {
	if c == nil {
		return 0
	}
	return c.canotoData.size.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *TestAction) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *TestAction) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.NumComputeUnits) {
		canoto.Append(&w, canoto__TestAction__NumComputeUnits__tag)
		canoto.AppendUint(&w, c.NumComputeUnits)
	}
	for _, v := range c.SpecifiedStateKeys {
		canoto.Append(&w, canoto__TestAction__SpecifiedStateKeys__tag)
		canoto.AppendBytes(&w, v)
	}
	if len(c.SpecifiedStateKeyPermissions) != 0 {
		canoto.Append(&w, canoto__TestAction__SpecifiedStateKeyPermissions__tag)
		canoto.AppendUint(&w, c.canotoData.SpecifiedStateKeyPermissionsSize.Load())
		for _, v := range c.SpecifiedStateKeyPermissions {
			canoto.AppendUint(&w, v)
		}
	}
	for _, v := range c.ReadKeys {
		canoto.Append(&w, canoto__TestAction__ReadKeys__tag)
		canoto.AppendBytes(&w, v)
	}
	for _, v := range c.WriteKeys {
		canoto.Append(&w, canoto__TestAction__WriteKeys__tag)
		canoto.AppendBytes(&w, v)
	}
	for _, v := range c.WriteValues {
		canoto.Append(&w, canoto__TestAction__WriteValues__tag)
		canoto.AppendBytes(&w, v)
	}
	if !canoto.IsZero(c.ExecuteErr) {
		canoto.Append(&w, canoto__TestAction__ExecuteErr__tag)
		canoto.AppendBool(&w, true)
	}
	if !canoto.IsZero(c.Nonce) {
		canoto.Append(&w, canoto__TestAction__Nonce__tag)
		canoto.AppendUint(&w, c.Nonce)
	}
	if !canoto.IsZero(c.Start) {
		canoto.Append(&w, canoto__TestAction__Start__tag)
		canoto.AppendInt(&w, c.Start)
	}
	if !canoto.IsZero(c.End) {
		canoto.Append(&w, canoto__TestAction__End__tag)
		canoto.AppendInt(&w, c.End)
	}
	return w
}

const (
	canoto__TestOutput__Bytes__tag = "\x0a" // canoto.Tag(1, canoto.Len)
)

type canotoData_TestOutput struct {
	size atomic.Uint64
}

// CanotoSpec returns the specification of this canoto message.
func (*TestOutput) CanotoSpec(...reflect.Type) *canoto.Spec {
	s := &canoto.Spec{
		Name: "TestOutput",
		Fields: []canoto.FieldType{
			{
				FieldNumber: 1,
				Name:        "Bytes",
				OneOf:       "",
				TypeBytes:   true,
			},
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*TestOutput) MakeCanoto() *TestOutput {
	return new(TestOutput)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *TestOutput) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *TestOutput) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = TestOutput{}
	c.canotoData.size.Store(uint64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.Bytes); err != nil {
				return err
			}
			if len(c.Bytes) == 0 {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *TestOutput) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *TestOutput) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var size uint64
	if len(c.Bytes) != 0 {
		size += uint64(len(canoto__TestOutput__Bytes__tag)) + canoto.SizeBytes(c.Bytes)
	}
	c.canotoData.size.Store(size)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *TestOutput) CachedCanotoSize() uint64 {
	if c == nil {
		return 0
	}
	return c.canotoData.size.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *TestOutput) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *TestOutput) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if len(c.Bytes) != 0 {
		canoto.Append(&w, canoto__TestOutput__Bytes__tag)
		canoto.AppendBytes(&w, c.Bytes)
	}
	return w
}
