// Copyright (C) 2024, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/hypersdk/state (interfaces: Mutable)

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMutable is a mock of Mutable interface.
type MockMutable struct {
	ctrl     *gomock.Controller
	recorder *MockMutableMockRecorder
}

// MockMutableMockRecorder is the mock recorder for MockMutable.
type MockMutableMockRecorder struct {
	mock *MockMutable
}

// NewMockMutable creates a new mock instance.
func NewMockMutable(ctrl *gomock.Controller) *MockMutable {
	mock := &MockMutable{ctrl: ctrl}
	mock.recorder = &MockMutableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutable) EXPECT() *MockMutableMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockMutable) GetValue(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockMutableMockRecorder) GetValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockMutable)(nil).GetValue), arg0, arg1)
}

// Insert mocks base method.
func (m *MockMutable) Insert(arg0 context.Context, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockMutableMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMutable)(nil).Insert), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockMutable) Remove(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockMutableMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockMutable)(nil).Remove), arg0, arg1)
}
