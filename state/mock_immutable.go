// Copyright (C) 2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/hypersdk/state (interfaces: Immutable)

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImmutable is a mock of Immutable interface.
type MockImmutable struct {
	ctrl     *gomock.Controller
	recorder *MockImmutableMockRecorder
}

// MockImmutableMockRecorder is the mock recorder for MockImmutable.
type MockImmutableMockRecorder struct {
	mock *MockImmutable
}

// NewMockImmutable creates a new mock instance.
func NewMockImmutable(ctrl *gomock.Controller) *MockImmutable {
	mock := &MockImmutable{ctrl: ctrl}
	mock.recorder = &MockImmutableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmutable) EXPECT() *MockImmutableMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockImmutable) GetValue(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockImmutableMockRecorder) GetValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockImmutable)(nil).GetValue), arg0, arg1)
}
