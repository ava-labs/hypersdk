// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.15.0
// source: types.go

package validitywindow

import (
	"io"
	"reflect"
	"sync/atomic"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Uint64

	_ = io.ErrUnexpectedEOF
)

const (
	canoto__BlockFetchRequest__BlockHeight__tag  = "\x09" // canoto.Tag(1, canoto.I64)
	canoto__BlockFetchRequest__MinTimestamp__tag = "\x11" // canoto.Tag(2, canoto.I64)
)

type canotoData_BlockFetchRequest struct {
	size atomic.Uint64
}

// CanotoSpec returns the specification of this canoto message.
func (*BlockFetchRequest) CanotoSpec(...reflect.Type) *canoto.Spec {
	var zero BlockFetchRequest
	s := &canoto.Spec{
		Name: "BlockFetchRequest",
		Fields: []canoto.FieldType{
			canoto.FieldTypeFromFint(
				/*type inference:*/ zero.BlockHeight,
				/*FieldNumber:   */ 1,
				/*Name:          */ "BlockHeight",
				/*FixedLength:   */ 0,
				/*Repeated:      */ false,
				/*OneOf:         */ "",
			),
			canoto.FieldTypeFromFint(
				/*type inference:*/ zero.MinTimestamp,
				/*FieldNumber:   */ 2,
				/*Name:          */ "MinTimestamp",
				/*FixedLength:   */ 0,
				/*Repeated:      */ false,
				/*OneOf:         */ "",
			),
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*BlockFetchRequest) MakeCanoto() *BlockFetchRequest {
	return new(BlockFetchRequest)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *BlockFetchRequest) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *BlockFetchRequest) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = BlockFetchRequest{}
	c.canotoData.size.Store(uint64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.BlockHeight); err != nil {
				return err
			}
			if canoto.IsZero(c.BlockHeight) {
				return canoto.ErrZeroValue
			}
		case 2:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.MinTimestamp); err != nil {
				return err
			}
			if canoto.IsZero(c.MinTimestamp) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *BlockFetchRequest) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *BlockFetchRequest) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var size uint64
	if !canoto.IsZero(c.BlockHeight) {
		size += uint64(len(canoto__BlockFetchRequest__BlockHeight__tag)) + canoto.SizeFint64
	}
	if !canoto.IsZero(c.MinTimestamp) {
		size += uint64(len(canoto__BlockFetchRequest__MinTimestamp__tag)) + canoto.SizeFint64
	}
	c.canotoData.size.Store(size)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *BlockFetchRequest) CachedCanotoSize() uint64 {
	if c == nil {
		return 0
	}
	return c.canotoData.size.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *BlockFetchRequest) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *BlockFetchRequest) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.BlockHeight) {
		canoto.Append(&w, canoto__BlockFetchRequest__BlockHeight__tag)
		canoto.AppendFint64(&w, c.BlockHeight)
	}
	if !canoto.IsZero(c.MinTimestamp) {
		canoto.Append(&w, canoto__BlockFetchRequest__MinTimestamp__tag)
		canoto.AppendFint64(&w, c.MinTimestamp)
	}
	return w
}

const (
	canoto__BlockFetchResponse__Blocks__tag = "\x0a" // canoto.Tag(1, canoto.Len)
)

type canotoData_BlockFetchResponse struct {
	size atomic.Uint64
}

// CanotoSpec returns the specification of this canoto message.
func (*BlockFetchResponse) CanotoSpec(...reflect.Type) *canoto.Spec {
	s := &canoto.Spec{
		Name: "BlockFetchResponse",
		Fields: []canoto.FieldType{
			{
				FieldNumber: 1,
				Name:        "Blocks",
				Repeated:    true,
				OneOf:       "",
				TypeBytes:   true,
			},
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*BlockFetchResponse) MakeCanoto() *BlockFetchResponse {
	return new(BlockFetchResponse)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *BlockFetchResponse) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *BlockFetchResponse) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = BlockFetchResponse{}
	c.canotoData.size.Store(uint64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__BlockFetchResponse__Blocks__tag)
			if err != nil {
				return err
			}
			c.Blocks = canoto.MakeSlice(c.Blocks, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.Blocks[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__BlockFetchResponse__Blocks__tag):]
				if err := canoto.ReadBytes(&r, &c.Blocks[1+i]); err != nil {
					return err
				}
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *BlockFetchResponse) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *BlockFetchResponse) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var size uint64
	for _, v := range c.Blocks {
		size += uint64(len(canoto__BlockFetchResponse__Blocks__tag)) + canoto.SizeBytes(v)
	}
	c.canotoData.size.Store(size)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *BlockFetchResponse) CachedCanotoSize() uint64 {
	if c == nil {
		return 0
	}
	return c.canotoData.size.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *BlockFetchResponse) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *BlockFetchResponse) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	for _, v := range c.Blocks {
		canoto.Append(&w, canoto__BlockFetchResponse__Blocks__tag)
		canoto.AppendBytes(&w, v)
	}
	return w
}
