// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/hypersdk/vm (interfaces: Controller)
//
// Generated by this command:
//
//	mockgen -package=vm -destination=vm/mock_controller.go github.com/ava-labs/hypersdk/vm Controller
//

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	chain "github.com/ava-labs/hypersdk/chain"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// StateManager mocks base method.
func (m *MockController) StateManager() chain.StateManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateManager")
	ret0, _ := ret[0].(chain.StateManager)
	return ret0
}

// StateManager indicates an expected call of StateManager.
func (mr *MockControllerMockRecorder) StateManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateManager", reflect.TypeOf((*MockController)(nil).StateManager))
}
