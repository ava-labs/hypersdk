// Code generated by MockGen. DO NOT EDIT.
// Source: vm.go

// Package mock_vm is a generated GoMock package.
package vm

import (
	context "context"
	reflect "reflect"

	chain "github.com/ava-labs/hypersdk/chain"
	gomock "github.com/golang/mock/gomock"
)

// MockVirtualMachine is a mock of VirtualMachine interface.
type MockVirtualMachine struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineMockRecorder
}

// MockVirtualMachineMockRecorder is the mock recorder for MockVirtualMachine.
type MockVirtualMachineMockRecorder struct {
	mock *MockVirtualMachine
}

// NewMockVirtualMachine creates a new mock instance.
func NewMockVirtualMachine(ctrl *gomock.Controller) *MockVirtualMachine {
	mock := &MockVirtualMachine{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachine) EXPECT() *MockVirtualMachineMockRecorder {
	return m.recorder
}

// Submit mocks base method.
func (m *MockVirtualMachine) Submit(ctx context.Context, verifySig bool, txs []*chain.Transaction) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", ctx, verifySig, txs)
	ret0, _ := ret[0].([]error)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockVirtualMachineMockRecorder) Submit(ctx, verifySig, txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockVirtualMachine)(nil).Submit), ctx, verifySig, txs)
}
